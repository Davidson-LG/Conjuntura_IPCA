---
title: "Relatório Mensal"
subtitle: "Análise do IPCA - IBGE"
date: last-modified
lang: pt
format: html
author: "DIC-RF"
title-block-banner: "#0f0c0fff"
execute: 
  echo: false
  warning: false
---

```{python}
# Instalando bibliotecas e importando-as
import pandas as pd
import sidrapy
from bcb import sgs
from bcb import Expectativas
import dbnomics
import datetime
import matplotlib as mt
import plotnine as p9
```

```{python}
# Coletando dados importantes e tratando

# Sidra - IPCA
dados_ipca = (
    sidrapy.get_table(
        table_code="7060",
        territorial_level="1",
        ibge_territorial_code="all",
        variable="63,69,2265,66",
        classifications= {"315": "7169,7170,7445,7486,7558,7625,7660,7712,7766,7786"},
        period = "all"
    )
)

# Metas BCB
meta = (
   sgs.get(
    codes={"Meta": 13521}
   ) 
)


# Núcleos 

Núcleos_IPCA = (
    sgs.get(
        {
         "P55": 28750,
         "DP": 16122,
         "MS": 4466,
         "EX3": 27839,
         "EX0": 11427
        }
    )       
)

# Desagregação 

dados_brutos_classificacoes = (
  sgs.get(
      codes =
          {"comercializaveis": 4447,
           "nao_comercializaveis": 4448,
           "industriais": 27863,
           "servicos": 10844,
           "monitorados": 4449,
           "alimentacao_no_domicilio": 27864,
           "livres": 11428
          },
          start = '2000-01-01'
)
)

# Difusão

indice_difusao = (
 sgs.get(
     {"Difusão": 21379}
 )
)
```

```{python}


# Tratamento dos dados

# Sidra - IPCA
dados_IPCA_tratado = (
    dados_ipca
    .rename(
        columns={"V":"valor", "D2C": "data", "D3N": "variavel", "D4N": "grupo"}
    )
    .filter(
        items = ["data", "valor", "variavel", "grupo"]
    )
    .query(
        "valor not in ['Valor'] & valor not in ['...']"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y%m"),
        valor = lambda x: x.valor.astype(float)
    )
    .replace(
        to_replace="IPCA - Variação mensal",
        value="variação % mensal"
    )
    .replace(
        to_replace="IPCA - Variação acumulada no ano",
        value="variação % ano"
    )
    .replace(
        to_replace="IPCA - Variação acumulada em 12 meses",
        value = "variação % 12 meses"
    )
    .replace(
        to_replace="IPCA - Peso mensal",
        value="Peso mensal"
    )
    .pivot(index= ['data', 'grupo'], columns='variavel', values = 'valor')
    .reset_index()
    
)


# Meta BCB
meta_tratado = (
    meta
    .reset_index()
    .rename(
        columns={"Date": "data"}
    )
    .rename(
        {"Meta": "meta"}, axis = "columns"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y-%M-%D"),
        meta = lambda x: x.meta.astype(float)
    )
    .set_index('data')
)


# Núcleos

nucleos_tratado = (
    Núcleos_IPCA
    .assign(
        P55 = lambda x: x['P55'].astype(float),
        DP = lambda x: x['DP'].astype(float),
        MS = lambda x: x['MS'].astype(float),
        EX3 = lambda x: x['EX3'].astype(float),
        EX0 = lambda x: x['EX0'].astype(float),
        media_nucleos = lambda x: x.mean(axis = 1)
    )
    .reset_index()
    .rename(
        {"Date": "data"}, axis = "columns"
    )
    
    .set_index('data')
)


nucleos_tratado_12m = (
    nucleos_tratado
    .rolling(window = 12)
    .apply(
        lambda x: ((1+x/100).prod() - 1) * 100, raw=False)
    )



# Dados Classificações IPCA

dados_brutos_classificacoes_tratado = (
    dados_brutos_classificacoes
    .reset_index()
    .rename(
        {"Date": "data"}, axis = "columns"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y-%M-%D")
    )
    .set_index('data')
)

dados_brutos_classificacoes_tratado_12M = (
    dados_brutos_classificacoes
    .reset_index()
    .rename(
        {"Date": "data"}, axis = "columns"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y-%M-%D")
    )
    .set_index('data')
    .rolling(window = 12)
    .apply(lambda x: ((x/100 + 1).prod()-1) * 100, raw = False)
)

# Difusão

difusao_tratado = (
    indice_difusao
    .reset_index()
    .assign(
        Date = lambda x: pd.to_datetime(x["Date"], format = "%Y-%M-%D")
    )
    .rename(
        {"Difusão": "difusao", "Date": "data"}, axis = "columns"
    )
    .set_index('data')
)   


```


## *Headline*

Destaques do mês:

O IPCA do mês registrou variação de X%, refletindo os movimentos recentes nos preços dos principais grupos pesquisados. Destacam-se as contribuições de alimentação, transportes e habitação, que apresentaram comportamentos distintos em relação ao mês anterior. O resultado mantém a inflação acumulada em 12 meses dentro do intervalo das metas estabelecidas pelo Banco Central, indicando um cenário de estabilidade, apesar de pressões pontuais em alguns segmentos.




```{python}
#| fig-align: center
grafico_ipca_meta = (
    dados_IPCA_tratado
    .query("grupo == 'Índice geral'")
    .filter(items = ['data', 'grupo', 'variação % mensal', 'variação % 12 meses'])
    .query("data >= '2022-12-31'")
    .set_index('data')
    .join(other = meta_tratado, on = 'data', how = 'left')
    .ffill(axis = 'index')
    .melt(
        value_vars=['variação % mensal', 'variação % 12 meses', 'meta'],
        ignore_index=False,
        value_name='valores'
         )
    .reset_index()
         )


from plotnine import element_blank
import datetime
from mizani.formatters import date_format
last_points = grafico_ipca_meta.sort_values('data').groupby('variable').tail(1)


cores = {
    "variação % mensal": "blue",
    "meta": "red",
    "variação % 12 meses": "#ff8100"
}

estilos = {
    "variação % mensal": "solid",
    "meta": "dashed",
    "variação % 12 meses": "dotted"
}


(
    p9.ggplot(grafico_ipca_meta) +
    p9.aes(
        x = 'data', y = 'valores', color = 'variable', linetype = 'variable') +
    p9.geom_line() + 
    p9.scale_color_manual(values = cores) + 
    p9.scale_linetype_manual(values = estilos) +  
    p9.labs(
        title='Inflação Headline - IPCA',
        x = '',
        y = ""
    ) + 
    p9.theme_minimal() + 
    p9.theme(
        legend_position='top',
        legend_title=element_blank(),
        plot_title= p9.element_text(weight = 'bold'),
        axis_text= p9.element_text(color = 'black'),
        panel_grid_major_x=p9.element_line(color='gray', size=0.3),
        panel_grid_major_y=p9.element_line(color='gray', size=0.3),
        panel_grid_minor=element_blank(), 
        panel_border = p9.element_rect(fill=None, color='black', size=0.5)
    ) + 
    p9.scale_x_date(date_breaks='1 year', labels=date_format('%Y')) + 
    p9.geom_label(
        data=last_points,
        mapping=p9.aes(label='valores'),
        fill = ['#ff8100', 'blue', 'red'],
        color = 'white',
        ha='left',
        va='center',
        nudge_x=3,
        size=7, 
        fontweight='bold' 
    )
)
```








```{python}
#| fig-align: center
grafico_variacao_grupo = (
    dados_IPCA_tratado
    .query(
        "grupo not in ['Índice geral'] & grupo not in ['...']"
    )
    .filter(
        items = ['data', 'grupo', 'variação % mensal']
    )
    .loc[lambda x: x['data'] == x['data'].max()]
    .assign(
        grupo = lambda x: x['grupo'].str.replace(r'\d\.', '', regex = True).str.strip()
    )
    .assign(
        cor = lambda x: x['variação % mensal'].apply(lambda x: 'positivo' if x > 0 else 'negativo')
    )
)


(
    p9.ggplot(grafico_variacao_grupo) + 
    p9.geom_col(p9.aes(x = 'grupo', y = 'variação % mensal', fill = 'cor')) + 
    p9.coord_flip() + 
    p9.labs(
        title = 'IPCA por grupo',
        caption = 'Elaborado por Davidson Loiolla',
        x = '',
        y = ''
    ) +
    p9.scale_fill_manual(
        values = {'positivo': '#27F5D3', 'negativo': '#F5276F'},
        guide=None
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight = 'bold'),
        legend_title=element_blank()

    )
    
    )








```


